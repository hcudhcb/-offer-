题目描述：
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

思路：
第一种：二分查找法：
把每一行看作递增的一维数组，每一行都做二分查找，找到target就return True，一行没找到就换成下一行继续查找。直到找完整个矩阵。时间复杂度是nlogn
```
# -*- coding:utf-8 -*-
class Solution:
    # array 二维列表
    def Find(self, target, array):
        # write code here
        for i in range(len(array)):
            low = 0
            high = len(array[0]) - 1 
            while low<=high:
                mid = (low+high) // 2
                if array[i][mid] > target:
                    high = mid-1
                elif array[i][mid] < target:
                    low = mid+1
                else:
                    return True
        return False
```

第二种：矩阵划分法：
因为行和列是递增排序的，所以选择可以从右上角或者左下角开始遍历，首先检查target和左下角的元素是否相等，若大于target，那么剔除最后一行，若小于，那么剔除第一列，以此类推。时间复杂度为O(N)
```
# -*- coding:utf-8 -*-
class Solution:
    # array 二维列表
    def Find(self, target, array):
        # write code here
        i = len(array)-1
        j = 0
        cols = len(array[0])-1
        while j<=cols and i>=0:
            if target < array[i][j]:
                i = i-1
            elif target > array[i][j]:
                j = j+1
            else:
                return True
        return False
```
